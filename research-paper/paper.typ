#import "lib/template.typ": *
#show: jarticle

= 序論

近年、MMORPG (Massively Multiplayer Online Role-Playing Game) をはじめとするオンラインゲームの増加により、コンピュータゲーム内での文字入力の機会が増加している。
ゲーム内での文字入力方式は、コンピュータ用のキーボードを用いる方式と、ディスプレイ上に表示されたキーを選択する方式、そしてゲームコントローラにキーを割り当てる方式に分けられる。
このうち、現代のゲーム専用機にはコンピュータ用のキーボードが同梱されていないことも多く、文字入力はディスプレイ上に表示されたキーを選択する方式が一般的である。
しかし、この方式では多量のキーがディスプレイに表示され、ユーザは入力したいキーまでカーソルを移動させる必要があるため操作が煩雑であること、またディスプレイに選択しているキーが表示されてしまうため、パスワードなどの機密情報の入力には向かないという問題がある。
そのような問題を解決するため、ゲームコントローラにキーを割り当てる方式が存在する。
ゲーム専用機の Nintendo Switch では、ペアレンタルコントロールの解除を行う際の暗証番号の入力にこの方式が採用されている。
ユーザはゲームコントローラのボタンおよびジョイスティックの8方向の入力で0から9までの数字を入力する。
一方で、この方式はゲームコントローラのボタン数が限られることにより、ボタンに文字を1対1で割り当てることができないという問題が存在する。
本論文では、テキスト解析ツールキットの KyTea を用いて、ゲームコントローラの数に限りがあるボタンによる入力から単語を推定し変換する入力メソッドを提案する。

// = 関連研究

= 手法

本論文では、広く普及しているゲームコントローラの一つである Xbox ワイヤレス コントローラー でのボタン入力を想定した。
本コントローラには12個のボタン (A, B, X, Y, LB, RB, LT, RT, 4方向の入力を受け付ける十字キー) が存在する。
このうち、1つのボタンを文字の削除、1つのボタンを変換に割り当て、残りの10個のボタンを文字入力に用いることとする。
それぞれのボタンに対応する文字の割り当てを @table-button-assignment に示す。

京都テキスト解析ツールキット (KyTea) を用いて、ボタンの入力系列から単語を得るモデルの学習を行った。
学習に際して、ボタンの入力系列と単語の対応関係を記述したテキストファイルを準備する Python スクリプトを作成した。
続いて、学習済みのモデルの評価を行うため、 kytea にコントローラからの入力を模した入力系列を与え、変換を行った。
なお、今回コーパスとして Brown Corpus を用い、取得したコーパス（57340文）のうち8割を学習用、残りの2割を学習済みのモデルの評価に用いた。


#figure(
  table(
    columns: 2,
    table.header([*ボタン*], [*入力された文字の候補*]),
    [0], [q, a, z],
    [1], [w, s, x],
    [2], [e, d, c],
    [3], [r, f, v],
    [4], [t, g, b],
    [5], [y, h, n],
    [6], [u, j, m],
    [7], [i, k],
    [8], [o, l],
    [9], [p],
  ),
  caption: [ボタンに対する文字の割り当て],
) <table-button-assignment>

#figure(
  ```txt
  452/the 368485/fulton 286545/county 43052/grand 6635/jury 1072/said 337205/friday 05/an 7532147404785/investigation 83/of 322254/recent 9376035/primary 28224785/election 93826222/produced 58/no 23722522/evidence 4504/that 055/any 73324680374721/irregularities 4887/took 98022/place
  ```,
  caption: [学習用データの一部],
)
#figure(
  ```txt
  452 0603328 25222 75 0 3727268861 2301 464 7 6614 4288 586 04864 74
  ```,
  caption: [評価用データの一部],
)

#figure(
  ```sh
  // コーパスを作成
  python make_corpus.py

  // モデルの学習
  train-kytea -full train.txt -model train.mod

  // 変換を行う。単語分割を行わないので -nows オプションを用いる。
  kytea -model train.mod -nows < test.txt > result.txt
  ```,
  caption: [モデルの学習および変換に関する操作],
)
= 評価

学習済みのモデルを用いて評価を行ったところ、変換の精度は $93.87%$ であった。

誤変換が生じた単語のリストを参照すると、学習用のコーパスに存在していなかったために入力系列から変換が行えなかった事象と、同一の入力系列の別の単語に変換を行ってしまった事象が存在した。

```sh
// 結果の分析
.venvnishimi@MacBook-Air-3 gamepad-keyboard % python evaluate.py
correct: 138914, wrong: 9068
accuracy: 93.87 %
```

= 結論
