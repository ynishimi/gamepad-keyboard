#import "lib/template.typ": *
#show: jarticle.with(
  fontsize: 11pt,
  title: [ゲームコントローラでの文字入力メソッド],
  authors: ([西見優輝],),
  date: datetime(year: 2025, month: 7, day: 3),
)

// Display block code in a larger block
// with more padding.
#show raw.where(block: true): block.with(
  fill: luma(240),
  inset: 10pt,
  radius: 4pt,
)

= 序論

近年、MMORPG (Massively Multiplayer Online Role-Playing Game) をはじめとするオンラインゲームの増加により、コンピュータゲーム内での文字入力の機会が増加している。
ゲーム内での文字入力方式は、コンピュータ用のキーボードを用いる方式と、ディスプレイ上に表示されたキーを選択する方式、そしてゲームコントローラにキーを割り当てる方式に分けられる。
このうち、現代のゲーム専用機にはコンピュータ用のキーボードが同梱されていないことも多く、文字入力はディスプレイ上に表示されたキーを選択する方式が一般的である。
しかし、この方式では多量のキーがディスプレイに表示され、ユーザは入力したいキーまでカーソルを移動させる必要があるため操作が煩雑であること、またディスプレイに選択しているキーが表示されてしまうため、パスワードなどの機密情報の入力には向かないという問題がある。
そのような問題を解決するため、ゲームコントローラにキーを割り当てる方式が存在する。
ゲーム専用機の Nintendo Switch では、ペアレンタルコントロールの解除を行う際の暗証番号の入力にこの方式が採用されている。
ユーザはゲームコントローラのボタンおよびジョイスティックの8方向の入力で0から9までの数字を入力する。
一方で、この方式はゲームコントローラのボタン数が限られることにより、ボタンに文字を1対1で割り当てることができないという問題が存在する。
本論文では、テキスト解析ツールキットの KyTea を用いて、ゲームコントローラの数に限りがあるボタンによる入力から単語を推定し変換する入力メソッドを提案する。
#footnote[https://github.com/ynishimi/gamepad-keyboard]

// = 関連研究

= 手法

本論文では、広く普及しているゲームコントローラの一つである Xbox ワイヤレス コントローラー でのボタン入力を想定した。
本コントローラには12個のボタン (A, B, X, Y, LB, RB, LT, RT, 4方向の入力を受け付ける十字キー) が存在する。
このうち、1つのボタンを文字の削除、1つのボタンを変換に割り当て、残りの10個のボタンを文字入力に用いることとする。
それぞれのボタンに対応する文字の割り当てを @table-button-assignment に示す。

#figure(
  table(
    columns: 2,
    table.header([*ボタン*], [*入力された文字の候補*]),
    [0], [q, a, z],
    [1], [w, s, x],
    [2], [e, d, c],
    [3], [r, f, v],
    [4], [t, g, b],
    [5], [y, h, n],
    [6], [u, j, m],
    [7], [i, k],
    [8], [o, l],
    [9], [p],
  ),
  caption: [ボタンに対する文字の割り当て],
) <table-button-assignment>

続いて、京都テキスト解析ツールキット (KyTea) #footnote[https://www.phontron.com/kytea/index-ja.html] を用いて、ボタンの入力系列から単語を得るモデルの学習を行った。
KyTea では、改行で区切られた文からなる、アノテーションが施されたコーパスを読み込み、モデルを学習することができる。
今回はコーパスとして Brown Corpus を用い、取得したコーパス（57340文）のうち8割を学習用、残りの2割を学習済みのモデルの評価に用いるものとして分割した。
コーパスにアノテーションを施すため、単語に対応するボタンの入力系列が記載されたテキストファイルを準備する Python スクリプトを作成した。
このスクリプトの実行によって得られるテキストファイルは、ボタンの入力系列と単語の対応関係が示された学習用データ (`train.txt`)、そしてボタンの入力系列のみが示された評価用データ (`test.txt`) の2種類である。
データの一部を、それぞれ @train_data および @test_data に示す。

#figure(
  ```txt
  452/the 368485/fulton 286545/county 43052/grand 6635/jury 1072/said 337205/friday 05/an 7532147404785/investigation 83/of 322254/recent 9376035/primary 28224785/election 93826222/produced 58/no 23722522/evidence 4504/that 055/any 73324680374721/irregularities 4887/took 98022/place
  ```,
  caption: [学習用データの一部],
) <train_data>
#figure(
  ```txt
  452 0603328 25222 75 0 3727268861 2301 464 7 6614 4288 586 04864 74
  ```,
  caption: [評価用データの一部],
) <test_data>

次に、 KyTea の学習プログラムを実行し、学習用データからモデルを作成した。
その後、学習済みのモデルの評価を行うため、評価用データを入力とし、 KyTea で学習したモデルを用いて変換を行った。

なお、一連の流れは @commands に示すようなコマンドによって行われた。


#figure(
  ```sh
  // コーパスを作成する。
  python make_corpus.py

  // モデルの学習を行う。学習結果は train_mod に保存される。
  train-kytea -full train.txt -model train.mod

  // 変換を行う。今回は単語分割を行わないため、 -nows オプションを用いる。
  // 変換結果は result.txt に保存される。
  time kytea -model train.mod -nows < test.txt > result.txt
  // 変換を行うのにかかった時間
  kytea -model train.mod -nows < test.txt > result.txt  0.38s user 0.03s system 94% cpu 0.430 total
  ```,
  caption: [モデルの学習および変換に関する操作],
) <commands>
= 評価

学習済みのモデルを用いて変換を行った結果と、元のコーパスを比較し、単語ごとに正しく変換が行われているかを確認するスクリプトを作成した。
正しく変換が行われていない場合、誤った変換をカウントし、誤変換リストを作成した。
評価を行った結果を @result に示す。

#figure(
  ```sh
  // 変換結果を元のコーパスと比較し、正誤判定を行う。
  python evaluate.py
  // 結果
  correct: 138914, unknown: 4514, wrong: 4554
  accuracy: 93.87 %
  ```,
  caption: [モデルを用いて変換を行った結果],
) <result>

== 時間

M4 チップ, 16 GB の RAM を搭載した Macbook Air で変換を行った結果、147982 単語の変換に実時間で $0.43$ 秒を要した。
これは $1$ 秒間で $344,144$ 単語の変換が可能であることから、ユーザの入力に対して十分高速な応答が可能であると考えられる。

== 精度

147982 単語の入力に対して変換を行ったところ、モデルが正しく単語を変換できた割合は $93.87%$ であった。
$4514$ 単語が変換に失敗し、 $4554$ 単語が誤った単語に変換された。
アメリカの大学生のテキストメッセージ1つあたりの単語数は平均で $14.3$ 単語である @lyddy2014analysis ため、本モデルでは1つのメッセージに $1.001$ 単語の誤りが生じる。
これは許容範囲であると考えられるものの、バースト誤りが生じた際などの実用性には問題があると考えられる。

誤変換が生じた単語のリストを参照すると、学習用のコーパスに存在していなかったために入力系列から変換が行えなかった事象と、同一の入力系列の別の単語に変換を行ってしまった事象が存在した。

=== 未知語による誤り

一つ目の事象は、 @unk_word_list に示すように、未知語が評価データに出現したことによる。
本手法は学習コーパスに含まれる単語とその入力系列の対応関係を学習するため、学習時に現れなかった単語は正しく変換できない。
実際に、誤変換された単語の多くは出現頻度の低い固有名詞や専門用語であった。
この問題は、より大規模で多様なドメインをカバーするコーパスを用いてモデルを学習させることで、精度が改善する可能性がある。

#figure(
  ```json
  [
    "604168/matsuo",
    35
  ],
  [
    "4305585/brannon",
    29
  ],
  [
    "30625/ramey",
    28
  ],
  [
    "27143856/ekstrohm",
    26
  ],
  [
    "52830/helva",
    26
  ],
  ```,
  caption: [未知語による誤りの一例],
) <unk_word_list>

=== 入力系列の曖昧さによる誤り

二つ目は、 @wrong_word_list に示すように、同一のボタン入力系列を持つ異なる単語が存在することによる。
例えば、@table-button-assignment の割り当てでは、"yes" と "new" はともに `521` という入力系列に対応する。
KyTea は学習データ中の出現頻度や周辺の単語（文脈）から最も確からしい単語を推定するが、文脈情報が不十分な場合や、学習データにおける出現頻度に偏りがある場合に誤りが生じやすい。
この誤りは文字数が小さい単語でよく確認された。
例えば、正解が "of" である入力 `83` に対して、"or" と誤って変換してしまうケースが $65$ 件生じた。
逆に、正解が "or" である入力 `83` に対して、"of" と誤って変換してしまうケースは $317$ 件であった。

KyTea では、 `-out conf` オプションを付与することにより、 @annotation のように、複数の変換候補がある際にその候補と信頼度を出力することができる。
各単語での信頼度の総和が大きい順に変換文の候補を作成し、ユーザが切り替える機能を実装することにより、この問題を緩和することができると考えられる。
またこの出力結果を、事前学習を行った BERT などの言語モデルに入力し、より自然な候補を選択することなどにより、変換の精度が向上する可能性がある。

#figure(
  ```json
  "521/yes": {
    "521/new": 30
  },
  "42225/beech": {
    "42225/teddy": 4
  },
  "83/of": {
    "83/or": 65
  },
  "8732/live": {
    "8732/life": 13
  },
  (...)
  "83/or": {
    "83/of": 317
  },
  ```,
  caption: [入力系列の曖昧さによる誤りの一例],
) <wrong_word_list>

#figure(
  ```txt
  081051/always 8772/like 4504/that 75/in 19742/spite 83/of&or 42754/being 0/a&z&q 474/big&bit&git 605/man&may&jan
  100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100
  100 100 100 100 100 1.08267&0 100 4.29435&0&-0.466309 2.75976&0&-0.125873 0.87444&0&-0.194746
  ```,
  caption: [信頼度付きアノテーションを実施した例],
) <annotation>
= 結論

本論文では、ボタン数に限りがあるゲームコントローラでの文字入力において、 KyTea を用いて入力から単語を推定し、変換を行う入力方法を提案した。
評価用データを用いて、学習を行ったモデルの評価を行ったところ、ゲームでの文字入力の主な用途である短文でのテキストメッセージにおいて、実用的であると考えられる精度および時間内での変換が可能であることが示された。

#bibliography("ref.bib")
